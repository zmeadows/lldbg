---
name: format-and-tidy

on:
  pull_request:
  push:
    branches: [master]

# Pin tool versions ONCE here to keep CI and local dev in sync.
# These are the current latest as of Oct 2025.
env:
  CF_VERSION: "21.1.2" # clang-format
  CT_VERSION: "21.1.1" # clang-tidy

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Install ONLY clang-format (via PyPI wheel), not the whole LLVM toolchain.
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install pinned clang-format
        run: |
          python -m pip install --upgrade pip
          python -m pip install "clang-format==${CF_VERSION}"
          clang-format --version

      # Check formatting ONLY for C/C++ files under top-level src/
      - name: Check formatting (src/* only)
        shell: bash
        run: |
          git -c core.quotePath=false ls-files -z -- 'src' \
            | grep -z -E '\.(h|hh|hpp|hxx|c|cc|cpp|cxx|m|mm)$' \
            | xargs -0 -r clang-format --dry-run --Werror

  tidy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install build prerequisites
        shell: bash
        run: |
          set -euxo pipefail
          export DEBIAN_FRONTEND=noninteractive

          pkgs=(build-essential ninja-build pkg-config cmake zlib1g-dev libfmt-dev libopengl-dev wget)
          if [ "${{ matrix.compiler }}" = "clang" ]; then
            pkgs+=(clang lldb)
          fi

          apt-get -o Dpkg::Use-Pty=0 install -y --no-install-recommends "${pkgs[@]}" || true

          # LLDB dev headers (name varies by distro)
          if ! apt-get -o Dpkg::Use-Pty=0 install -y --no-install-recommends liblldb-dev ; then
            alt="$(apt-cache search -n '^liblldb-[0-9]+-dev$' | awk '{print $1}' | sort -V | tail -n1 || true)"
            if [ -n "$alt" ]; then
              apt-get -o Dpkg::Use-Pty=0 install -y --no-install-recommends "$alt"
            else
              echo "No liblldb-*-dev found; continuing without LLDB dev headers."
            fi
          fi

          # Optional GL/X11 bits (best-effort)
          if ! apt-get -o Dpkg::Use-Pty=0 install -y --no-install-recommends \
                libgl1-mesa-dev libx11-dev libxrandr-dev libxinerama-dev libxi-dev libxcursor-dev \
                libglfw3-dev; then
            echo "Optional GL/GLFW not available; continuing."
          fi

          # Speed up: avoid building these from source
          apt-get -o Dpkg::Use-Pty=0 install -y --no-install-recommends \
            libfmt-dev libimgui-dev libcxxopts-dev || true

          apt-get clean && rm -rf /var/lib/apt/lists/*

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install pinned clang-tidy
        run: |
          python -m pip install "clang-tidy==${CT_VERSION}"
          clang-tidy --version

      - name: Configure (dev preset -> compile_commands.json in build/dev/)
        run: cmake --preset dev

      # Run clang-tidy ONLY for C/C++ sources under top-level src/.
      # Header filter also restricted to src/ to avoid build-tree deps.
      - name: Run clang-tidy (src/* only)
        shell: bash
        run: |
          git -c core.quotePath=false ls-files -z -- 'src' \
            | grep -z -E '\.(c|cc|cpp|cxx|m|mm)$' \
            | xargs -0 -r -n1 -P"$(nproc)" \
              clang-tidy -p build/dev \
                --header-filter='(^|.*/)(src)/' \
                --warnings-as-errors='*' --
