name: "Setup Linux Build Container"
description: "Setup a linux container with all system packages required to build lldbg."
inputs:
  compiler:
    description: "compiler to use for cmake build"
    required: false
    default: "clang"
  update_cmake:
    description: "update cmake for older linux images"
    required: false
    default: "false"
runs:
  using: "composite"

  steps:
    - name: "Echo Inputs"
      shell: bash
      run: |
        echo "compiler: ${{ inputs.compiler }}"
        echo "update_cmake: ${{ inputs.update_cmake }}"

    - name: Install Build Dependencies
      shell: bash
      run: |
        set -euo pipefail
        export DEBIAN_FRONTEND=noninteractive

        # Use sudo on hosted runners; noop inside root containers
        if command -v sudo >/dev/null 2>&1; then SUDO="sudo"; else SUDO=""; fi

        $SUDO apt-get -o Acquire::Retries=3 update

        PKGS=(
          build-essential ninja-build pkg-config cmake zlib1g-dev libfmt-dev libopengl-dev wget git ca-certificates
          # Optional GL/X11 bits (best-effort)
          libgl1-mesa-dev libx11-dev libxrandr-dev libxinerama-dev libxi-dev libxcursor-dev libglfw3-dev
          # Optional helper libs (best-effort)
          libimgui-dev libcxxopts-dev
        )

        # Optional compiler from workflow input
        if [ "${{ inputs.compiler }}" = "clang" ]; then
          PKGS+=(clang)
        fi

        # LLDB dev headers: prefer generic, else fall back to latest versioned package
        if $SUDO apt-get -s install -y --no-install-recommends liblldb-dev >/dev/null 2>&1; then
          LLDB_PKG=liblldb-dev
        else
          LLDB_PKG="$($SUDO apt-cache search -n '^liblldb-[0-9]+-dev$' | awk '{print $1}' | sort -V | tail -n1 || true)"
        fi
        if [ -n "${LLDB_PKG:-}" ]; then PKGS+=("$LLDB_PKG"); else echo "No LLDB dev headers available."; fi

        # De-duplicate package names
        mapfile -t PKGS < <(printf '%s\n' "${PKGS[@]}" | awk '!seen[$0]++')

        # Filter to installable packages using a dry-run (-s).
        OK=()
        for p in "${PKGS[@]}"; do
          if $SUDO apt-get -s install -y --no-install-recommends "$p" >/dev/null 2>&1; then
            OK+=("$p")
          else
            echo "Skipping unavailable package: $p"
          fi
        done

        # Install whatever is available in one go (donâ€™t fail the job if something goes sideways)
        if [ ${#OK[@]} -gt 0 ]; then
          $SUDO apt-get -o Acquire::Retries=3 -o Dpkg::Use-Pty=0 install -y --no-install-recommends "${OK[@]}" || true
        else
          echo "No requested packages are available on this image."
        fi

        $SUDO apt-get clean
        $SUDO rm -rf /var/lib/apt/lists/*

    - name: Update CMake
      if: ${{ inputs.update_cmake == 'true' }}
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: "3.28.x"

    - name: Select Compiler # specify toolchain for the build
      shell: bash
      run: |
        set -eux
        if [ "${{ inputs.compiler }}" = "clang" ]; then
          echo "CC=clang" >> "$GITHUB_ENV"
          echo "CXX=clang++" >> "$GITHUB_ENV"
        else
          echo "CC=gcc" >> "$GITHUB_ENV"
          echo "CXX=g++" >> "$GITHUB_ENV"
        fi

    - name: Install mold # fast linker
      uses: rui314/setup-mold@v1
      with:
        mold-version: 2.40.4
        make-default: false
